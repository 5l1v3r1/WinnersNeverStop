version: '2'

services:
  # adminer:
  #   image: adminer
  #   restart: on-failure
  #   ports:
  #     - 8080:8080

  db:
    container_name: wns_db
    image: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: WinnersNeverStop
    ports:
      - 3306:5432
    networks:
      - default
      - postgres

  client:
    container_name: wns_client
    restart: on-failure
    build: 
      context: "./client"
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    # env_file:
    #   - ./docker/api/.env
    volumes:
      - wns_client_data:/usr/app/client

  api:
    container_name: wns_api
    restart: on-failure
    image: node
    build: 
      context: "./server"
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - default
      - postgres
      # - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.domain=api.winnersnevers.top"
      - "traefik.frontend.rule=Host:api.winnersnevers.top"
      - "traefik.port=80"
      - "traefik.protocol=http"

  nginx:
    container_name: wns_nginx
    image: nginx:latest
    volumes_from:
      - client
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - default
      # - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.domain=winnersnevers.top"
      - "traefik.frontend.rule=Host:winnersnevers.top"
      - "traefik.port=80"
      - "traefik.protocol=http"

volumes:
  wns_client_data:

networks:
  # web:
  #   external: true
  postgres: {}